/**
 * SceneJS Example - Procedural generation of a spiral staircase
 *
 * Lindsay Kay
 * lindsay.kay AT xeolabs.com
 * January 2010
 *
 * This spiral staircase is generated by rotating and translating a flattened
 * cube in a loop. The loop, with varying rotation and translation parameters
 * in each iteration, is effected by a generator node.
 *
 * A generator node's job is to generate a dynamic scope obect containing data for
 * sub-nodes. See how its first parameter is a function to generate that scope
 * object. During a scene traversal, SceneJS will loop at that node. In each loop,
 * SceneJS calls the function, sets the scope and traverses the subtree, stopping
 * its loop as soon as the function result is undefined. Our generator causes several
 * loops, where in each loop it sets a scope containing different parameters for
 * the translation and rotation in its subgraph. It then stops the loop by not
 * returning anything.
 */

SceneJS.onEvent("error", function(e) {
    alert(e.exception.message ? e.exception.message : e.exception);
});

var exampleScene = SceneJS.scene({ canvasId: 'theCanvas' },

        SceneJS.perspective({
            fovy : 65.0, aspect : 1.0, near : 0.10, far : 300.0
        },
                SceneJS.lookAt({
                    eye : { x: 30.0, y: 0.0, z: 35.0},
                    look : { x : 15.0, y : 0.0, z : 0 },
                    up : { x: 0.0, y: 1.0, z: 0.0 }
                },
                        SceneJS.lights({
                            sources: [
                                {
                                    type:                   "dir",
                                    color:                  { r: 1.0, g: 1.0, b: 1.0 },
                                    diffuse:                true,
                                    specular:               true,
                                    dir:                    { x: 1.0, y: 1.0, z: 1.0 }
                                },
                                {
                                    type:                   "dir",
                                    color:                  { r: 0.8, g: 0.8, b: 0.8 },
                                    diffuse:                true,
                                    specular:               true,
                                    dir:                    { x: -2.0, y: -1.0, z: 0.0 }
                                }
                            ]},
                                SceneJS.material({
                                    baseColor:      { r: 0.6, g: 0.9, b: 0.6 },
                                    specularColor:  { r: 0.6, g: 0.9, b: 0.6 },
                                    specular:       0.9,
                                    shine:          6.0
                                },

                                        SceneJS.selector({selection: [0, 1, 3]},

                                                SceneJS.translate({y : 15},
                                                        SceneJS.text({text: "     Selector selection contains 0"}),
                                                        SceneJS.objects.teapot()),

                                                SceneJS.translate({y : 5},
                                                        SceneJS.text({text: "     Selector selection contains 1"}),
                                                        SceneJS.objects.teapot()),

                                                SceneJS.translate({y : -5},
                                                        SceneJS.text({text: "     Selector selection contains 2"}),
                                                        SceneJS.objects.teapot()),

                                                SceneJS.translate({y : -15},
                                                        SceneJS.text({text: "     Selector selection contains 3"}),
                                                        SceneJS.objects.teapot())
                                                )
                                        )
                                )
                        )
                )
        );

var yaw = 0;
var pitch = 0;
var lastX;
var lastY;
var dragging = false;

/* Throw the switch, Igor!
 * We render the scene, injecting the initial angles for the rotate nodes.
 */
exampleScene.render({yaw: yaw, pitch: pitch});

var canvas = document.getElementById(exampleScene.getCanvasId());
;

function mouseDown(event) {
    lastX = event.clientX;
    lastY = event.clientY;
    dragging = true;
}

function mouseUp() {
    dragging = false;
}

/* On a mouse drag, we'll re-render the scene, passing in
 * incremented angles in each time.
 */
function mouseMove(event) {
    if (dragging) {
        yaw += (event.clientX - lastX) * 0.5;
        pitch += (event.clientY - lastY) * -0.5;
        exampleScene.render({yaw: yaw, pitch: pitch});
        lastX = event.clientX;
        lastY = event.clientY;
    }
}

canvas.addEventListener('mousedown', mouseDown, true);
canvas.addEventListener('mousemove', mouseMove, true);
canvas.addEventListener('mouseup', mouseUp, true);



