/**
 * SceneJS Example - Procedural generation of a spiral staircase
 *
 * Lindsay Kay
 * lindsay.kay AT xeolabs.com
 * January 2010
 *
 * This spiral staircase is generated by rotating and translating a flattened
 * cube in a loop. The loop, with varying rotation and translation parameters
 * in each iteration, is effected by a generator node.
 *
 * A generator node's job is to generate a dynamic scope obect containing data for
 * sub-nodes. See how its first parameter is a function to generate that scope
 * object. During a scene traversal, SceneJS will loop at that node. In each loop,
 * SceneJS calls the function, sets the scope and traverses the subtree, stopping
 * its loop as soon as the function result is undefined. Our generator causes four
 * loops, where in each one it sets a scope containing different extents for its
 * child viewport node. It stops the loop by not returning anything.
 */

var exampleScene = SceneJS.scene(

        SceneJS.loggingToPage({ elementId: "logging" },

                SceneJS.renderer({
                    canvasId: 'theCanvas',
                    clearColor : { r:0, g:0, b:0.0, a: 1 },
                    viewport:{ x : 0, y : 0, width: 800, height: 800}  ,
                    clear : { depth : true, color : true} ,
                    enableTexture2D: true
                },

                        SceneJS.lights({
                            lights: [
                                {
                                    pos: { x: 50.0, y: 40.0, z: -100.0 }
                                }
                            ]},
                                SceneJS.perspective({ fovy : 25.0, aspect : 1, near : 0.10, far : 1000.0
                                },
                                        SceneJS.scalarInterpolator({
                                            type:"linear",
                                            input:"alpha",
                                            output:"eyez",
                                            keys: [0.0, 0.3, 1.0],
                                            values: [700, -20, -50]
                                        },
                                                SceneJS.scalarInterpolator({
                                                    type:"linear",
                                                    input:"alpha",
                                                    output:"eyex",
                                                    keys: [0.0,  0.3, 1.0],
                                                    values: [-50, 60, 0]
                                                },
                                                        SceneJS.lookAt(function(scope) {
                                                            return {

                                                                eye : { x: scope.get("eyex"), y: scope.get("eyex"), z: scope.get("eyez")},
                                                                look : { x : 0.0, y : .0, z : 0 },
                                                                up : { x: 0.0, y: 1.0, z: 0.0 }
                                                            };
                                                        },
                                                                SceneJS.material({
                                                                    ambient:  { r:0.6, g:0.6, b:0.6 },
                                                                    diffuse:  { r:0.7, g:0.7, b:0.9 }
                                                                },
                                                                        (function () {
                                                                            var textureNodeArgs = [
                                                                                {
                                                                                    uri:"./general-zod.jpg",
                                                                                    flipY : false,
                                                                                    wait: false
                                                                                }
                                                                            ];
                                                                            for (var i = -350; i < 350; i += 5) {
                                                                                for (var i2 = -350; i2 < 350; i2 += 5) {
                                                                                    var y = (Math.random() * 50.0) - 25;
                                                                                    textureNodeArgs.push(

                                                                                            SceneJS.boundingBox({
                                                                                                xmin: i - 2,
                                                                                                ymin: y - 2,
                                                                                                zmin: i2 - 2,
                                                                                                xmax: i + 2,
                                                                                                ymax: y + 2,
                                                                                                zmax: i2 + 2 },

                                                                                                    SceneJS.translate({
                                                                                                        x: i,
                                                                                                        y: y,
                                                                                                        z: i2
                                                                                                    },
                                                                                                            SceneJS.scale({ x: 2, y: 2, z: 2},
                                                                                                                    SceneJS.objects.cube()
                                                                                                                    )
                                                                                                            )
                                                                                                    )
                                                                                            );
                                                                                }
                                                                            }
                                                                            return SceneJS.texture.apply(this, textureNodeArgs);
                                                                        })())
                                                                )
                                                        )
                                                )
                                        )
                                )
                        )
                )

        );

var alpha = 0;
var pInterval;

function doit() {
    if (alpha > 150) {
        exampleScene.destroy();
        clearInterval(pInterval);
    }

    alpha += 0.0005;
    try {
        exampleScene.render({"alpha":alpha});
    } catch (e) {
        if (e.message) {
            alert(e.message);
        } else {
            alert(e);
        }
        throw e;
    }
}

/* Hack to get any scene definition exceptions up front.
 * Chrome seemed to absorb them in setInterval!
 */
exampleScene.render({"alpha":alpha});

/* Continue animation
 */
pInterval = setInterval("doit()", 10);


