/**
 * SceneJS Example - Procedural generation of a spiral staircase
 *
 * Lindsay Kay
 * lindsay.kay AT xeolabs.com
 * January 2010
 *
 * This spiral staircase is generated by rotating and translating a flattened
 * cube in a loop. The loop, with varying rotation and translation parameters
 * in each iteration, is effected by a generator node.
 *
 * A generator node's job is to generate a dynamic scope obect containing data for
 * sub-nodes. See how its first parameter is a function to generate that scope
 * object. During a scene traversal, SceneJS will loop at that node. In each loop,
 * SceneJS calls the function, sets the scope and traverses the subtree, stopping
 * its loop as soon as the function result is undefined. Our generator causes four
 * loops, where in each one it sets a scope containing different extents for its
 * child viewport node. It stops the loop by not returning anything.
 */
with (SceneJS) {
    var exampleScene = scene({}, // node always has a config object

            renderer({
                canvasId: 'theCanvas',
                clearColor : { r:0, g:0, b:0.0, a: 1 },
                viewport:{ x : 1, y : 1, width: 600, height: 600}  ,
                clear : { depth : true, color : true}
            },

                    shader({ type: 'simple-shader' },

                            lights({
                                lights: [
                                    {
                                        pos: { x: -30.0, y: -9.0, z: 100.0 }
                                    }
                                ]},
                                    perspective({ fovy : 65.0, aspect : 1.0, near : 0.10, far : 300.0
                                    },

                                            lookAt({
                                                eye : { x: 0.0, y: 30.0, z: -20.0},
                                                look : { x : 0.0, y : 15.0, z : 0 },
                                                up : { x: 0.0, y: 1.0, z: 0.0 }
                                            },
                                                    material({
                                                        ambient:  { r:0.4, g:0.2, b:0.2 },
                                                        diffuse:  { r:0.9, g:0.5, b:0.4 }
                                                    },

                                                        /**
                                                         * Generate a sequence of Y-axis rotations
                                                         */
                                                            generator((function() {
                                                                var angle = 0;
                                                                var height = -10;
                                                                return function() {
                                                                    angle += 15.0;
                                                                    height += 1.0;
                                                                    if (angle <= 560.0) {
                                                                        return { angle: angle, height: height };
                                                                    }
                                                                };
                                                            })(),
                                                                    rotate(function(scope) {
                                                                        return { angle : scope.get("angle"), y: 1.0 };
                                                                    },
                                                                            translate(function(scope) {
                                                                                return { x: 5.0, y : scope.get("height") };
                                                                            },
                                                                                /** Slab for step
                                                                                 */
                                                                                    scale({x: 3.0, y: 0.2, z: 1.0},
                                                                                            objects.cube()
                                                                                            )
                                                                                    ) // rotate
                                                                            ) // translate
                                                                    ) // generator
                                                            ) // material
                                                    ) // lookAt


                                            ) // frustum
                                    ) // lights
                            ) // shader
                    ) // renderer
            ); // scene

    try {
        exampleScene.render();
    } catch (e) {
        if (e.message) {
            alert(e.message);
        } else {
            alert(e);
        }
        throw e;
    }
}

